syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "Protobuf/base/acs12.proto";

// The namespace of this class
option csharp_namespace = "TomorrowDAO.Contracts.Treasury";

service TreasuryContract {
  // The name of the state class the smart contract is going to use to access blockchain state
  option (aelf.csharp_state) = "TomorrowDAO.Contracts.Treasury.TreasuryContractState";
  option (aelf.base) = "Protobuf/base/acs12.proto";

  rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}

  rpc CreateTreasury (CreateTreasuryInput) returns (google.protobuf.Empty) {}

  rpc AddSupportedStakingTokens (AddSupportedStakingTokensInput) returns (google.protobuf.Empty) {}

  rpc RemoveSupportedStakingTokens (RemoveSupportedStakingTokensInput) returns (google.protobuf.Empty) {}

  rpc Donate (DonateInput) returns (google.protobuf.Empty) {}

  rpc StakeToken (StakeTokenInput) returns (google.protobuf.Empty) {}

  rpc RequestTransfer (RequestTransferInput) returns (google.protobuf.Empty) {}

  rpc ReleaseTransfer (ReleaseTransferInput) returns (google.protobuf.Empty) {}

  rpc UnlockToken (aelf.Hash) returns (google.protobuf.Empty) {}

  rpc Pause (aelf.Hash) returns (google.protobuf.Empty) {}

  rpc Unpause (aelf.Hash) returns (google.protobuf.Empty) {}

  rpc TransferInEmergency (TransferInEmergencyInput) returns (google.protobuf.Empty) {}

  // DAO id
  rpc GetTreasuryAccountAddress (aelf.Hash) returns (aelf.Address) {
    option (aelf.is_view) = true;
  }

  rpc GetTreasuryInfo(aelf.Hash) returns (TreasuryInfo) {
    option (aelf.is_view) = true;
  }

  // treasury_account_address
  rpc GetDAOIdByTreasuryAccountAddress (aelf.Address) returns (aelf.Hash) {
    option (aelf.is_view) = true;
  }

  rpc IsTokenSupportedStaking (IsTokenSupportedStakingInput) returns (google.protobuf.BoolValue) {
    option (aelf.is_view) = true;
  }

  rpc GetFundInfo (GetFundInfoInput) returns (FundInfo) {
    option (aelf.is_view) = true;
  }

  rpc GetTotalFundInfo (GetTotalFundInfoInput) returns (FundInfo) {
    option (aelf.is_view) = true;
  }

  rpc GetLockInfo (LockInfoInput) returns (LockInfo) {
    option (aelf.is_view) = true;
  }

  rpc IsPaused (aelf.Hash) returns (google.protobuf.BoolValue) {
    option (aelf.is_view) = true;
  }
}

message InitializeInput {
  aelf.Address dao_contract_address = 1;
  aelf.Address governance_contract_address = 2;
}

message CreateTreasuryInput {
  aelf.Hash dao_id = 1;
  SymbolList symbols = 2;
}

message SymbolList {
  repeated string data = 1;
}

message TreasuryInfo {
  aelf.Address treasury_address = 1;
  SymbolList supported_staking_tokens = 2;
}

message TreasuryCreated {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  aelf.Address treasury_account_address = 2;
  SymbolList symbol_list = 3;
}

message AddSupportedStakingTokensInput {
  aelf.Hash dao_id = 1;
  SymbolList symbols = 2;
}

message SupportedStakingTokensAdded {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  SymbolList added_tokens = 2;
  SymbolList supported_tokens = 3;
}

message RemoveSupportedStakingTokensInput {
  aelf.Hash dao_id = 1;
  SymbolList symbols = 2;
}

message SupportedStakingTokensRemoved {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  SymbolList removed_tokens = 2;
}

message IsTokenSupportedStakingInput {
  aelf.Hash dao_id = 1;
  string symbol = 2;
}

message DonateInput {
  aelf.Hash dao_id = 1;
  int64 amount = 2;
  string symbol = 3;
}

message FundInfo {
  aelf.Hash dao_id = 1;
  aelf.Address treasury_address = 2;
  string symbol = 3;
  int64 available_funds = 4;
  int64 locked_funds = 5;
}

message DonationReceived {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  int64 amount = 2;
  string symbol = 3;
  aelf.Address donor = 4;
  google.protobuf.Timestamp donation_time = 5;
  aelf.Address treasury_address = 6;
}

message StakeTokenInput {
  aelf.Hash dao_id = 1;
  int64 amount = 2;
  string symbol = 3;
}

message TokenStaked {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  int64 amount = 2;
  string symbol = 3;
  aelf.Address account = 4;
  google.protobuf.Timestamp staked_time = 5;
  aelf.Address treasury_address = 6;
}

message RequestTransferInput {
  aelf.Hash dao_id = 1;
  int64 amount = 2;
  string symbol = 3;
  aelf.Address recipient = 4;
  ProposalInfo proposalInfo = 5;
}

message ProposalInfo {
  string proposal_title = 2;
  string proposal_description = 3;
  string forum_url = 4;
  aelf.Address scheme_address = 5;
  aelf.Hash vote_scheme_id = 6;
}

message LockInfoInput {
  aelf.Hash proposal_id = 1;
  aelf.Hash lock_id = 2;
}

message LockInfo {
  aelf.Hash dao_id = 1;
  aelf.Address treasury_address = 2;
  string symbol = 3;
  int64 amount = 4;
  aelf.Hash proposal_id = 5;
  aelf.Hash lock_id = 6;
}

message TreasuryTokenLocked {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  LockInfo lock_info = 2;
  aelf.Address proposer = 3;
}

message ReleaseTransferInput {
  aelf.Hash dao_id = 1;
  int64 amount = 2;
  string symbol = 3;
  aelf.Address recipient = 4;
  string memo = 5;
  aelf.Hash lock_id = 6;
}

message TreasuryTransferReleased {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  aelf.Address treasury_address = 2;
  int64 amount = 3;
  string symbol = 4;
  aelf.Address recipient = 5;
  string memo = 6;
  aelf.Address executor = 7;
  aelf.Hash proposal_id = 8;
  aelf.Hash lock_id = 9;
}

message TreasuryTokenUnlocked {
  option (aelf.is_event) = true;
  LockInfo lock_info = 1;
  aelf.Address executor = 2;
}

message GetFundInfoInput {
  aelf.Hash dao_id = 1;
  string symbol = 2;
}

message GetTotalFundInfoInput {
  string symbol = 1;
}

message Paused {
  option (aelf.is_event) = true;
  aelf.Address account = 1;
  aelf.Hash dao_id = 2;
  aelf.Address treasury_address = 3;
  bool paused_all = 4;
}

message Unpaused {
  option (aelf.is_event) = true;
  aelf.Address account = 1;
  aelf.Hash dao_id = 2;
  aelf.Address treasury_address = 3;
  bool unpaused_all = 4;
}

message TransferInEmergencyInput {
  aelf.Hash dao_id = 1;
  string symbol = 2;
  int64 amount = 3;
  aelf.Address recipient = 4;
}

message EmergencyTransferred {
  option (aelf.is_event) = true;
  aelf.Hash dao_id = 1;
  string symbol = 2;
  int64 amount = 3;
  aelf.Address recipient = 4;
  aelf.Address account = 5;
}